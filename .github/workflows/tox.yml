# GitHub Actions workflow for testing and continuous integration.
#
# The tests are run with tox with the test environments configured by
# tox.ini.


# Add remote-data test!


name: Tests

on: [push, pull_request]

env:
  - SETUP_XVFB=True  # avoid issues if mpl tries to open a GUI window
  - TOXARGS='-v'

jobs:

  main_matrix:
    name: ${{ matrix.os }}, ${{ matrix.python-version }}-${{ matrix.tox-env }}
    runs-on: ${{ matrix.os }}
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        exclude:
          - os: macos-latest
            python-version: 3.6
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 3.7
          - os: windows-latest
            python-version: 3.9
        tox-env: ['alldeps-cov']
    steps:
    - name: Define tox environment name
      shell: bash
      run: echo toxenv-full=$(python -c "print('py'+'${{ matrix.python-version }}'.replace('.', '') + '-${{ matrix.tox-env }}')") >> $GITHUB_ENV
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox coverage
    - name: Print Python, pip, setuptools, and tox versions
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import pip; print(f'pip {pip.__version__}')"
        python -c "import setuptools; print(f'setuptools {setuptools.__version__}')"
        python -c "import tox; print(f'tox {tox.__version__}')"

    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"

    if: "!(${{ matrix.os }} == 'ubuntu-latest' && ${{ matrix.python-version }} == 3.8)"
    - name: Run tox -e ${{ env.toxenv-full }} (${{ matrix.os }})
      run: |
        echo ${{ matrix.tox-env }}
        #tox -e ${{ matrix.tox-env }}

    if: "(${{ matrix.os }} == 'ubuntu-latest' && ${{ matrix.python-version }} == 3.8)"
    - name: Run tox -e ${{ env.toxenv-full }} (${{ matrix.os }})
      env:
        - TOXPOSARGS="--remote-data=any"
      run: |
        echo "including remote data"
        echo ${{ matrix.tox-env }}
        #tox -e ${{ matrix.tox-env }}

    - name: Update coverage to codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml

  tox_matrix:
    name: ${{ matrix.os }}, ${{ matrix.python-version }}-${{ matrix.env.TOXENV }}
    runs-on: ${{ matrix.os }}
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
        env:
          - TOXENV: test
          - TOXENV: test-alldeps-devdeps
          - TOXENV: codestyle
          - TOXENV: build_docs
          - TOXENV: linkcheck
          - TOXENV: bandit
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox
    - name: Install graphviz dependency
      if: contains(matrix.env.TOXENV, 'build_docs')
      run: |
        sudo apt-get -y install graphviz
    - name: Print Python, pip, setuptools, and tox versions
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import pip; print(f'pip {pip.__version__}')"
        python -c "import setuptools; print(f'setuptools {setuptools.__version__}')"
        python -c "import tox; print(f'tox {tox.__version__}')"
    - name: Run tox -e ${{ matrix.env.TOXENV }} (${{ matrix.os }})
      run: |
        echo ${{ matrix.env.TOXENV }}
        #tox -e ${{ matrix.env.TOXENV }}

  astropy_lts:
    name: ${{ matrix.os }}, ${{ matrix.python-version }}-${{ matrix.tox-env }}
    runs-on: ${{ matrix.os }}
    if: "!(contains(github.event.head_commit.message, '[skip ci]') || contains(github.event.head_commit.message, '[ci skip]'))"
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6, 3.7]
        tox-env: ['test-alldeps-astropylts-numpy117',
                  'test-alldeps-astropylts-numpy118']
        exclude:
          - python-version: 3.6
            tox-env: 'test-alldeps-astropylts-numpy118'
          - python-version: 3.7
            tox-env: 'test-alldeps-astropylts-numpy117'
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox
    - name: Print Python, pip, setuptools, and tox versions
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "import pip; print(f'pip {pip.__version__}')"
        python -c "import setuptools; print(f'setuptools {setuptools.__version__}')"
        python -c "import tox; print(f'tox {tox.__version__}')"
    - name: Run tox -e ${{ matrix.tox-env }} (${{ matrix.os }})
      run: |
        echo ${{ matrix.tox-env }}
        #tox -e ${{ matrix.tox-env }}
